import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Shuffle, Copy, Save, Sparkles } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import Confetti from 'react-confetti';

interface CoinIdea {
  name: string;
  ticker: string;
  theme: string;
  logoIdea: string;
}

const IdeaGenerator = ({ coinIdea, setCoinIdea }: { coinIdea: CoinIdea, setCoinIdea: (idea: CoinIdea) => void }) => {
  const [theme, setTheme] = useState('');
  const [generatedIdea, setGeneratedIdea] = useState<CoinIdea | null>(coinIdea);
  const [isGenerating, setIsGenerating] = useState(false);
  const [showConfetti, setShowConfetti] = useState(false);
  const { toast } = useToast();

  const themeVariations = {
    animal: ['frog', 'dog', 'cat', 'hamster', 'monkey', 'shark', 'whale', 'dolphin', 'penguin', 'tiger'],
    space: ['galaxy', 'mars', 'moon', 'stars', 'rocket', 'astronaut', 'alien', 'comet', 'nebula', 'planet'],
    food: ['pizza', 'burger', 'taco', 'donut', 'cake', 'cookie', 'banana', 'apple', 'coffee', 'beer'],
    object: ['diamond', 'crown', 'sword', 'shield', 'key', 'lamp', 'chair', 'phone', 'car', 'house'],
    emotion: ['happy', 'angry', 'sleepy', 'excited', 'confused', 'surprised', 'cool', 'silly', 'brave', 'chill']
  };

  const prefixes = ['Pulse', 'Chain', 'Mega', 'Super', 'Ultra', 'Crypto', 'Degen', 'Moon', 'Rocket', 'Turbo'];
  const suffixes = ['Coin', 'Token', 'Pulse', 'Chain', 'X', 'Finance', 'Swap', 'Protocol', 'DAO', 'Network'];

  const generateIdea = (inputTheme?: string) => {
    setIsGenerating(true);
    
    setTimeout(() => {
      let selectedTheme = inputTheme || theme;
      
      // If no theme provided, pick random
      if (!selectedTheme) {
        const categories = Object.values(themeVariations).flat();
        selectedTheme = categories[Math.floor(Math.random() * categories.length)];
      }
      
      const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
      const suffix = suffixes[Math.floor(Math.random() * suffixes.length)];
      
      const capitalizedTheme = selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1);
      const coinName = Math.random() > 0.5 ? `${prefix}${capitalizedTheme}` : `${capitalizedTheme}${suffix}`;
      const ticker = `$${coinName.toUpperCase().substring(0, 6)}`;
      
      const logoIdeas = [
        `A cartoon ${selectedTheme} wearing a PulseChain crown`,
        `A futuristic ${selectedTheme} with laser eyes and purple aura`,
        `A ${selectedTheme} surfing on blockchain waves`,
        `A minimalist ${selectedTheme} icon with pulse heartbeat lines`,
        `A ${selectedTheme} astronaut floating in purple space`,
        `A geometric ${selectedTheme} with gradient purple-to-orange colors`
      ];
      
      const newIdea: CoinIdea = {
        name: coinName,
        ticker: ticker,
        theme: `A ${selectedTheme}-themed meme coin bringing fun and community to PulseChain.`,
        logoIdea: logoIdeas[Math.floor(Math.random() * logoIdeas.length)]
      };
      
      setGeneratedIdea(newIdea);
      setIsGenerating(false);
      setShowConfetti(true);
      setCoinIdea(newIdea); // sync with parent
      // Save to localStorage
      localStorage.setItem('lastGeneratedIdea', JSON.stringify(newIdea));
      
      setTimeout(() => setShowConfetti(false), 3000);
      
      toast({
        title: "Meme Coin Idea Generated! 🎉",
        description: `Generated ${newIdea.name} (${newIdea.ticker})`,
      });
    }, 1500);
  };

  const copyAllDetails = () => {
    if (!generatedIdea) return;
    
    const details = `🚀 MEME COIN IDEA 🚀

💎 Name: ${generatedIdea.name}
🎯 Ticker: ${generatedIdea.ticker}
📝 Theme: ${generatedIdea.theme}
🎨 Logo Idea: ${generatedIdea.logoIdea}

Generated by MemePulse - Your PulseChain Meme Coin Generator`;

    navigator.clipboard.writeText(details);
    toast({
      title: "Copied to Clipboard! 📋",
      description: "All coin details have been copied.",
    });
  };

  const saveIdea = () => {
    if (!generatedIdea) return;
    
    const savedIdeas = JSON.parse(localStorage.getItem('savedIdeas') || '[]');
    savedIdeas.push({ ...generatedIdea, timestamp: new Date().toISOString() });
    localStorage.setItem('savedIdeas', JSON.stringify(savedIdeas));
    
    toast({
      title: "Idea Saved! 💾",
      description: "Your meme coin idea has been saved locally.",
    });
  };

  return (
    <section id="generator" className="relative py-16 md:py-24 bg-gradient-to-br from-black via-gray-900/50 to-black min-h-[60vh] backdrop-blur-3xl">
      {showConfetti && (
        <Confetti width={window.innerWidth} height={window.innerHeight} recycle={false} numberOfPieces={120} />
      )}
      <div className="container mx-auto px-4 max-w-4xl">
        <div className="text-center mb-10 md:mb-14">
          <h2 className="font-orbitron text-4xl md:text-6xl font-bold mb-4 bg-gradient-to-r from-pulse-purple via-pulse-orange to-pulse-purple bg-clip-text text-transparent">
            💡 Meme Coin Idea Generator
          </h2>
          <p className="text-xl md:text-2xl text-gray-400 max-w-2xl mx-auto leading-relaxed">
            Enter a theme or keyword and let AI generate your next viral PulseChain meme coin idea!
          </p>
        </div>
        <Card className="bg-black/40 border-2 border-purple-500/20 rounded-2xl shadow-xl">
          <CardHeader>
            <CardTitle className="text-2xl font-orbitron text-center">Generate Your Meme Coin</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="flex flex-col md:flex-row gap-4">
              <Input
                placeholder="Enter a theme/keyword (e.g., frog, toaster, galaxy)"
                value={theme}
                onChange={(e) => setTheme(e.target.value)}
                className="flex-1 bg-black/50 border-purple-500/20 text-white placeholder-gray-400"
              />
              <div className="flex gap-2">
                <Button
                  onClick={() => generateIdea()}
                  disabled={isGenerating}
                  className="bg-gradient-to-r from-pulse-purple to-pulse-orange hover:from-pulse-orange hover:to-pulse-purple transition-all duration-300 px-8"
                >
                  {isGenerating ? (
                    <div className="flex items-center gap-2">
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                      Generating...
                    </div>
                  ) : (
                    <div className="flex items-center gap-2">
                      <Sparkles className="w-4 h-4" />
                      Generate Idea!
                    </div>
                  )}
                </Button>
                <Button
                  onClick={() => generateIdea('')}
                  variant="outline"
                  className="border-purple-500/20 hover:bg-purple-900/20"
                >
                  <Shuffle className="w-4 h-4" />
                </Button>
              </div>
            </div>
            {generatedIdea && (
              <div className="mt-8 p-6 bg-gradient-to-br from-purple-900/20 to-orange-900/20 rounded-lg border border-purple-500/30">
                <div className="grid md:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div>
                      <h3 className="font-orbitron text-lg font-bold text-pulse-orange mb-2">
                        🪙 Coin Name
                      </h3>
                      <p className="text-2xl font-bold text-white">{generatedIdea.name}</p>
                    </div>
                    <div>
                      <h3 className="font-orbitron text-lg font-bold text-pulse-orange mb-2">
                        🎯 Ticker Symbol
                      </h3>
                      <p className="text-2xl font-bold text-green-400">{generatedIdea.ticker}</p>
                    </div>
                  </div>
                  <div className="space-y-4">
                    <div>
                      <h3 className="font-orbitron text-lg font-bold text-pulse-orange mb-2">
                        📝 Theme Summary
                      </h3>
                      <p className="text-gray-300">{generatedIdea.theme}</p>
                    </div>
                    <div>
                      <h3 className="font-orbitron text-lg font-bold text-pulse-orange mb-2">
                        🎨 Logo Idea
                      </h3>
                      <p className="text-gray-300">{generatedIdea.logoIdea}</p>
                    </div>
                  </div>
                </div>
                <div className="flex flex-wrap gap-4 mt-6 pt-4 border-t border-gray-600">
                  <Button
                    onClick={copyAllDetails}
                    variant="outline"
                    className="flex items-center gap-2 border-purple-500/20 hover:bg-purple-900/20"
                  >
                    <Copy className="w-4 h-4" />
                    Copy All Details
                  </Button>
                  <Button
                    onClick={saveIdea}
                    variant="outline"
                    className="flex items-center gap-2 border-purple-500/20 hover:bg-purple-900/20"
                  >
                    <Save className="w-4 h-4" />
                    Save Idea
                  </Button>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
        {/* Animated divider for flow */}
        <div className="w-full flex justify-center mt-12">
          <div className="h-2 w-32 rounded-full bg-gradient-to-r from-pulse-purple via-pulse-orange to-pulse-purple animate-pulse" />
        </div>
      </div>
    </section>
  );
};

export default IdeaGenerator;
