
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Copy, Download } from 'lucide-react';
import { TokenomicsData, formatNumber } from '@/utils/tokenomicsValidation';
import { useToast } from '@/hooks/use-toast';

interface ActionButtonsProps {
  tokenomics: TokenomicsData;
  hasErrors: boolean;
}

export const ActionButtons = ({ tokenomics, hasErrors }: ActionButtonsProps) => {
  const { toast } = useToast();

  const generateSummary = () => {
    if (hasErrors) {
      toast({
        title: "Validation Error",
        description: "Please fix allocation errors before generating summary.",
        variant: "destructive"
      });
      return;
    }

    const summary = `
üöÄ TOKENOMICS SUMMARY üöÄ

üíé Total Supply: ${formatNumber(tokenomics.totalSupply)} tokens

üìä TAXES:
‚Ä¢ Buy Tax: ${tokenomics.buyTax}%
‚Ä¢ Sell Tax: ${tokenomics.sellTax}%

üí∞ TAX ALLOCATION:
‚Ä¢ Liquidity: ${tokenomics.taxAllocation.liquidity}%
‚Ä¢ Marketing: ${tokenomics.taxAllocation.marketing}%
‚Ä¢ Reflection: ${tokenomics.taxAllocation.reflection}%

üéØ SUPPLY ALLOCATION:
‚Ä¢ PulseX Liquidity: ${tokenomics.supplyAllocation.pulsex}% (${formatNumber((parseFloat(tokenomics.totalSupply) * parseFloat(tokenomics.supplyAllocation.pulsex) / 100).toString())} tokens)
‚Ä¢ Airdrop: ${tokenomics.supplyAllocation.airdrop}% (${formatNumber((parseFloat(tokenomics.totalSupply) * parseFloat(tokenomics.supplyAllocation.airdrop) / 100).toString())} tokens)
‚Ä¢ Dev Team: ${tokenomics.supplyAllocation.dev}% (${formatNumber((parseFloat(tokenomics.totalSupply) * parseFloat(tokenomics.supplyAllocation.dev) / 100).toString())} tokens)
‚Ä¢ Marketing: ${tokenomics.supplyAllocation.marketing}% (${formatNumber((parseFloat(tokenomics.totalSupply) * parseFloat(tokenomics.supplyAllocation.marketing) / 100).toString())} tokens)
‚Ä¢ Burn: ${tokenomics.supplyAllocation.burn}% (${formatNumber((parseFloat(tokenomics.totalSupply) * parseFloat(tokenomics.supplyAllocation.burn) / 100).toString())} tokens)

Generated by MemePulse Tokenomics Engine
    `.trim();

    navigator.clipboard.writeText(summary);
    toast({
      title: "Summary Copied! üìã",
      description: "Tokenomics summary copied to clipboard.",
    });
  };

  const exportData = () => {
    const data = {
      tokenomics,
      timestamp: new Date().toISOString(),
      generatedBy: "MemePulse"
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'tokenomics-config.json';
    a.click();
    URL.revokeObjectURL(url);
    
    toast({
      title: "Exported! üìÅ",
      description: "Tokenomics data exported as JSON.",
    });
  };

  return (
    <Card className="bg-card/80 backdrop-blur-md border-purple-500/20">
      <CardContent className="pt-6">
        <div className="space-y-4">
          <Button
            onClick={generateSummary}
            className="w-full bg-gradient-to-r from-pulse-purple to-pulse-orange hover:from-pulse-orange hover:to-pulse-purple"
            disabled={hasErrors}
          >
            <Copy className="w-4 h-4 mr-2" />
            Copy Tokenomics Summary
          </Button>
          
          <Button
            onClick={exportData}
            variant="outline"
            className="w-full border-gray-600 hover:bg-gray-800"
          >
            <Download className="w-4 h-4 mr-2" />
            Export Configuration
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};
