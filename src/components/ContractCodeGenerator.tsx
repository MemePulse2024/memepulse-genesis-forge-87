import { useState, ChangeEvent, useEffect } from 'react';
import { Icon } from '@/components/ui/icon';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { Slider } from '@/components/ui/slider';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Copy, Download, Code, Zap, Shield, Settings, Coins, AlertTriangle, Cog } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { TokenomicsData } from '@/utils/tokenomicsValidation';

const getFeatureDescription = (feature: string): string => {
  const descriptions: Record<string, string> = {
    antiWhale: "Limit maximum transaction and wallet amounts",
    blacklist: "Block malicious addresses from trading",
    pausable: "Emergency pause functionality for trading",
    reflection: "Automatic rewards for token holders",
    burnable: "Enable token burning mechanism"
  };
  return descriptions[feature] || "";
};

const generateContractCode = (settings: ContractSettings): string => {
  const imports = [
    'pragma solidity ^0.8.19;',
    '',
    'import "@openzeppelin/contracts/token/ERC20/ERC20.sol";',
    'import "@openzeppelin/contracts/security/Pausable.sol";',
    'import "@openzeppelin/contracts/access/Ownable.sol";',
    settings.securityFeatures.burnable ? 'import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";' : '',
    settings.securityFeatures.reflection ? 'import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol";' : '',
  ].filter(Boolean).join('\n');

  const contractName = settings.tokenName.replace(/\s+/g, '');
  const inheritance = [
    'ERC20',
    'Pausable',
    'Ownable',
    settings.securityFeatures.burnable ? 'ERC20Burnable' : '',
    settings.securityFeatures.reflection ? 'ERC20Votes' : ''
  ].filter(Boolean).join(', ');

  const contractStart = `
contract ${contractName} is ${inheritance} {
    uint256 public maxTxAmount;
    uint256 public maxWalletAmount;
    bool public tradingEnabled;
    ${settings.securityFeatures.blacklist ? 'mapping(address => bool) private _blacklist;' : ''}
    ${settings.autoLiquidity ? 'uint256 public liquidityFee = 300; // 3%' : ''}
`;

  const constructor = `
    constructor() ERC20("${settings.tokenName}", "${settings.tokenSymbol}") {
        _mint(msg.sender, ${settings.totalSupply} * 10 ** decimals());
        maxTxAmount = (${settings.maxTxAmount} * totalSupply()) / 100;
        maxWalletAmount = (${settings.maxWalletAmount} * totalSupply()) / 100;
    }
`;

  const securityFeatures = [
    settings.securityFeatures.antiWhale ? `
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {
        super._beforeTokenTransfer(from, to, amount);
        require(amount <= maxTxAmount || from == owner() || to == owner(), "Transfer amount exceeds maximum");
        if (to != owner() && from != owner()) {
            require(balanceOf(to) + amount <= maxWalletAmount, "Wallet amount exceeds maximum");
        }
    }` : '',
    
    settings.securityFeatures.blacklist ? `
    function blacklistAddress(address account, bool value) external onlyOwner {
        _blacklist[account] = value;
    }

    function isBlacklisted(address account) public view returns (bool) {
        return _blacklist[account];
    }` : '',
    
    settings.securityFeatures.pausable ? `
    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }` : '',
    
    settings.autoLiquidity ? `
    function setLiquidityFee(uint256 fee) external onlyOwner {
        require(fee <= 1000, "Fee cannot exceed 10%");
        liquidityFee = fee;
    }` : ''
  ].filter(Boolean).join('\n');

  return `// SPDX-License-Identifier: MIT
${imports}

/**
 * @title ${settings.tokenName}
 * @dev Generated by MemePulse Genesis Forge
 * @custom:security-contact ${settings.owner}
 */
${contractStart}${constructor}${securityFeatures}
}`;
};

const TABS = [
  {
    value: "settings",
    label: "Basic Settings",
    icon: <Icon name="settings" className="w-5 h-5" />,
  },
  {
    value: "security",
    label: "Security Features",
    icon: <Icon name="shield" className="w-5 h-5" />,
  },
  {
    value: "preview",
    label: "Contract Preview",
    icon: <Icon name="code" className="w-5 h-5" />,
  },
];

interface SecurityFeatures {
  antiWhale: boolean;
  blacklist: boolean;
  pausable: boolean;
  reflection: boolean;
  burnable: boolean;
}

interface ContractSettings {
  tokenName: string;
  tokenSymbol: string;
  initialSupply: number;
  decimals: number;
  totalSupply: string;
  maxTxAmount: string;
  maxWalletAmount: string;
  autoLiquidity: boolean;
  liquidityLockDays: number;
  owner: string;
  securityFeatures: SecurityFeatures;
}

const ContractCodeGenerator = () => {
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState("settings");
  const [isGenerating, setIsGenerating] = useState(false);
  const [isCopied, setIsCopied] = useState(false);
  
  const [settings, setSettings] = useState<ContractSettings>({
    tokenName: "",
    tokenSymbol: "",
    initialSupply: 1000000,
    decimals: 18,
    totalSupply: "1000000000",
    maxTxAmount: "2",
    maxWalletAmount: "4",
    autoLiquidity: true,
    liquidityLockDays: 365,
    owner: "",
    securityFeatures: {
      antiWhale: true,
      blacklist: true,
      pausable: true,
      reflection: false,
      burnable: true
    }
  });

  const [generatedContract, setGeneratedContract] = useState<string>("");

  const handleSettingsChange = (field: keyof ContractSettings, value: any) => {
    setSettings(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSecurityFeatureToggle = (feature: keyof SecurityFeatures) => {
    setSettings(prev => ({
      ...prev,
      securityFeatures: {
        ...prev.securityFeatures,
        [feature]: !prev.securityFeatures[feature]
      }
    }));
  };

  const handleGenerateContract = async () => {
    setIsGenerating(true);
    try {
      // Contract generation feedback stages
      setGeneratedContract("// Initializing contract generation...");
      await new Promise(resolve => setTimeout(resolve, 800));
      
      setGeneratedContract(prev => prev + "\n// Configuring token parameters...");
      await new Promise(resolve => setTimeout(resolve, 800));
      
      setGeneratedContract(prev => prev + "\n// Implementing security features...");
      await new Promise(resolve => setTimeout(resolve, 800));
      
      const contractCode = generateContractCode(settings);
      setGeneratedContract(contractCode);
      
      toast({
        title: "Contract Generated",
        description: "Your smart contract has been generated successfully!",
        duration: 3000
      });
    } catch (error) {
      toast({
        title: "Generation Failed",
        description: "Failed to generate contract. Please check your settings.",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCopyCode = async () => {
    try {
      await navigator.clipboard.writeText(generatedContract);
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), 2000);
      toast({
        title: "Copied!",
        description: "Contract code copied to clipboard",
        duration: 2000
      });
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Failed to copy contract code",
        variant: "destructive"
      });
    }
  };

  const handleDownloadContract = () => {
    const blob = new Blob([generatedContract], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${settings.tokenName.replace(/\s+/g, '')}_contract.sol`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="py-24 bg-gradient-to-br from-black via-gray-900/50 to-black min-h-screen backdrop-blur-3xl">
      <div className="container mx-auto px-4 max-w-7xl">
        <div className="text-center mb-16">
          <h2 className="font-orbitron text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-pulse-purple via-pulse-orange to-pulse-purple bg-clip-text text-transparent">
            Smart Contract Generator
          </h2>
          <p className="text-xl md:text-2xl text-gray-400 max-w-3xl mx-auto leading-relaxed">
            Generate a complete, feature-rich smart contract for your token
          </p>
        </div>

        <div className="max-w-6xl mx-auto">
          <Card className="bg-black/40 backdrop-blur-xl border-2 border-purple-500/20 shadow-[0_0_45px_-15px_rgba(147,51,234,0.3)] rounded-2xl">
            <Tabs defaultValue="settings" className="p-6">
              <TabsList className="grid grid-cols-3 w-full h-auto mb-8 bg-gray-800/50 backdrop-blur-md border-2 border-purple-500/20 rounded-xl p-3 gap-4">
                {TABS.map((tab) => (
                  <TabsTrigger
                    key={tab.value}
                    value={tab.value}
                    className="relative px-6 py-4 rounded-lg data-[state=active]:bg-gradient-to-r data-[state=active]:from-purple-500/20 data-[state=active]:to-orange-500/20 data-[state=active]:shadow-lg transition-all duration-200 hover:bg-white/5"
                  >
                    <div className="flex flex-col items-center gap-2">
                      {tab.icon}
                      <span className="font-medium">{tab.label}</span>
                    </div>
                  </TabsTrigger>
                ))}
              </TabsList>

              <TabsContent value="settings" className="space-y-8">
                <Card className="bg-black/30 rounded-xl p-6 border-2 border-blue-500/20 shadow-lg hover:border-blue-500/40 transition-all duration-200">
                  <CardHeader className="pb-4">
                    <div className="flex items-center gap-3">
                      <Settings className="w-5 h-5 text-blue-400" />
                      <CardTitle>Token Configuration</CardTitle>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <div>
                          <Label htmlFor="tokenName">Token Name</Label>
                          <Input
                            id="tokenName"
                            value={settings.tokenName}
                            onChange={(e) => handleSettingsChange('tokenName', e.target.value)}
                            className="bg-black/50 border-purple-500/20 focus:border-purple-500/40"
                          />
                        </div>
                        <div>
                          <Label htmlFor="tokenSymbol">Token Symbol</Label>
                          <Input
                            id="tokenSymbol"
                            value={settings.tokenSymbol}
                            onChange={(e) => handleSettingsChange('tokenSymbol', e.target.value)}
                            className="bg-black/50 border-purple-500/20 focus:border-purple-500/40"
                          />
                        </div>
                      </div>
                      <div className="space-y-4">
                        <div>
                          <Label htmlFor="totalSupply">Total Supply</Label>
                          <Input
                            id="totalSupply"
                            value={settings.totalSupply}
                            onChange={(e) => handleSettingsChange('totalSupply', e.target.value)}
                            className="bg-black/50 border-purple-500/20 focus:border-purple-500/40"
                          />
                        </div>
                        <div>
                          <Label htmlFor="decimals">Decimals</Label>
                          <Input
                            id="decimals"
                            type="number"
                            value={settings.decimals}
                            onChange={(e) => handleSettingsChange('decimals', parseInt(e.target.value))}
                            className="bg-black/50 border-purple-500/20 focus:border-purple-500/40"
                          />
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card className="bg-black/30 rounded-xl p-6 border-2 border-red-500/20 shadow-lg hover:border-red-500/40 transition-all duration-200">
                  <CardHeader className="pb-4">
                    <div className="flex items-center gap-3">
                      <Shield className="w-5 h-5 text-red-400" />
                      <CardTitle>Security Features</CardTitle>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      {Object.entries(settings.securityFeatures).map(([feature, enabled]) => (
                        <div key={feature} className="flex items-center justify-between p-4 bg-black/20 rounded-lg">
                          <div>
                            <Label className="font-medium">{feature.charAt(0).toUpperCase() + feature.slice(1)}</Label>
                            <p className="text-sm text-gray-400">{getFeatureDescription(feature)}</p>
                          </div>
                          <Switch
                            checked={enabled}
                            onCheckedChange={() => handleSecurityFeatureToggle(feature as keyof SecurityFeatures)}
                            className="data-[state=checked]:bg-red-500"
                          />
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="preview" className="space-y-6">
                <Card className="bg-black/30 rounded-xl border-2 border-green-500/20">
                  <CardContent className="p-6">
                    <div className="bg-black/60 rounded-lg p-4 font-mono text-sm">
                      <pre className="whitespace-pre-wrap break-words">
                        {generatedContract || "// Your generated contract will appear here"}
                      </pre>
                    </div>
                    <div className="flex justify-end gap-4 mt-6">
                      <Button
                        onClick={handleCopyCode}
                        className="bg-purple-500/20 hover:bg-purple-500/30"
                        disabled={!generatedContract}
                      >
                        <Copy className="w-4 h-4 mr-2" />
                        {isCopied ? "Copied!" : "Copy Code"}
                      </Button>
                      <Button
                        onClick={handleDownloadContract}
                        className="bg-green-500/20 hover:bg-green-500/30"
                        disabled={!generatedContract}
                      >
                        <Download className="w-4 h-4 mr-2" />
                        Download
                      </Button>
                    </div>
                  </CardContent>
                </Card>
                <Button
                  onClick={handleGenerateContract}
                  disabled={isGenerating}
                  className="w-full bg-gradient-to-r from-purple-600 to-orange-500 hover:from-purple-700 hover:to-orange-600 text-white font-semibold py-4 rounded-xl shadow-lg transition-all duration-300 flex items-center justify-center gap-2"
                >
                  {isGenerating ? (
                    <>
                      <div className="animate-spin w-5 h-5 border-2 border-white/20 border-t-white rounded-full" />
                      <span>Generating...</span>
                    </>
                  ) : (
                    <>
                      <Zap className="w-5 h-5" />
                      <span>Generate Smart Contract</span>
                    </>
                  )}
                </Button>
              </TabsContent>
            </Tabs>
          </Card>
        </div>
      </div>
    </div>
  );
};

  const copyContract = () => {
    navigator.clipboard.writeText(generatedContract);
    toast({
      title: "Contract Copied! 📋",
      description: "Smart contract code copied to clipboard.",
    });
  };

export default ContractCodeGenerator;
