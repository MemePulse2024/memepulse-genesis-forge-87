
import { useState, ChangeEvent, useEffect } from 'react';
import { Icon } from '@/components/ui/icon';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { Slider } from '@/components/ui/slider';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Copy, Download, Code, Zap, Shield, Settings, AlertTriangle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { TokenomicsData } from '@/utils/tokenomicsValidation';

interface ContractCodeGeneratorProps {
  tokenomics: TokenomicsData;
  coinIdea: any;
}

interface SecurityFeatures {
  antiWhale: boolean;
  blacklist: boolean;
  pausable: boolean;
  reflection: boolean;
  burnable: boolean;
}

interface ContractSettings {
  tokenName: string;
  tokenSymbol: string;
  initialSupply: number;
  decimals: number;
  totalSupply: string;
  maxTxAmount: string;
  maxWalletAmount: string;
  autoLiquidity: boolean;
  liquidityLockDays: number;
  owner: string;
  securityFeatures: SecurityFeatures;
}

const getFeatureDescription = (feature: string): string => {
  const descriptions: Record<string, string> = {
    antiWhale: "Limit maximum transaction and wallet amounts",
    blacklist: "Block malicious addresses from trading",
    pausable: "Emergency pause functionality for trading",
    reflection: "Automatic rewards for token holders",
    burnable: "Enable token burning mechanism"
  };
  return descriptions[feature] || "";
};

const generateContractCode = (settings: ContractSettings): string => {
  const imports = [
    'pragma solidity ^0.8.19;',
    '',
    'import "@openzeppelin/contracts/token/ERC20/ERC20.sol";',
    'import "@openzeppelin/contracts/security/Pausable.sol";',
    'import "@openzeppelin/contracts/access/Ownable.sol";',
    settings.securityFeatures.burnable ? 'import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";' : '',
    settings.securityFeatures.reflection ? 'import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol";' : '',
  ].filter(Boolean).join('\n');

  const contractName = settings.tokenName.replace(/\s+/g, '');
  const inheritance = [
    'ERC20',
    'Pausable',
    'Ownable',
    settings.securityFeatures.burnable ? 'ERC20Burnable' : '',
    settings.securityFeatures.reflection ? 'ERC20Votes' : ''
  ].filter(Boolean).join(', ');

  const contractStart = `
contract ${contractName} is ${inheritance} {
    uint256 public maxTxAmount;
    uint256 public maxWalletAmount;
    bool public tradingEnabled;
    ${settings.securityFeatures.blacklist ? 'mapping(address => bool) private _blacklist;' : ''}
    ${settings.autoLiquidity ? 'uint256 public liquidityFee = 300; // 3%' : ''}
`;

  const constructor = `
    constructor() ERC20("${settings.tokenName}", "${settings.tokenSymbol}") {
        _mint(msg.sender, ${settings.totalSupply} * 10 ** decimals());
        maxTxAmount = (${settings.maxTxAmount} * totalSupply()) / 100;
        maxWalletAmount = (${settings.maxWalletAmount} * totalSupply()) / 100;
    }
`;

  const securityFeatures = [
    settings.securityFeatures.antiWhale ? `
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {
        super._beforeTokenTransfer(from, to, amount);
        require(amount <= maxTxAmount || from == owner() || to == owner(), "Transfer amount exceeds maximum");
        if (to != owner() && from != owner()) {
            require(balanceOf(to) + amount <= maxWalletAmount, "Wallet amount exceeds maximum");
        }
    }` : '',
    
    settings.securityFeatures.blacklist ? `
    function blacklistAddress(address account, bool value) external onlyOwner {
        _blacklist[account] = value;
    }

    function isBlacklisted(address account) public view returns (bool) {
        return _blacklist[account];
    }` : '',
    
    settings.securityFeatures.pausable ? `
    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }` : '',
    
    settings.autoLiquidity ? `
    function setLiquidityFee(uint256 fee) external onlyOwner {
        require(fee <= 1000, "Fee cannot exceed 10%");
        liquidityFee = fee;
    }` : ''
  ].filter(Boolean).join('\n');

  return `// SPDX-License-Identifier: MIT
${imports}

/**
 * @title ${settings.tokenName}
 * @dev Generated by MemePulse Genesis Forge
 * @custom:security-contact ${settings.owner}
 */
${contractStart}${constructor}${securityFeatures}
}`;
};

const ContractCodeGenerator = ({ tokenomics, coinIdea }: ContractCodeGeneratorProps) => {
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState("settings");
  const [isGenerating, setIsGenerating] = useState(false);
  const [isCopied, setIsCopied] = useState(false);
  
  const [settings, setSettings] = useState<ContractSettings>({
    tokenName: coinIdea?.name || "",
    tokenSymbol: coinIdea?.symbol || "",
    initialSupply: 1000000,
    decimals: 18,
    totalSupply: tokenomics.totalSupply || "1000000000",
    maxTxAmount: "2",
    maxWalletAmount: "4",
    autoLiquidity: true,
    liquidityLockDays: 365,
    owner: "",
    securityFeatures: {
      antiWhale: true,
      blacklist: true,
      pausable: true,
      reflection: false,
      burnable: true
    }
  });

  const [generatedContract, setGeneratedContract] = useState<string>("");

  // Update settings when props change
  useEffect(() => {
    setSettings(prev => ({
      ...prev,
      tokenName: coinIdea?.name || prev.tokenName,
      tokenSymbol: coinIdea?.symbol || prev.tokenSymbol,
      totalSupply: tokenomics.totalSupply || prev.totalSupply
    }));
  }, [tokenomics, coinIdea]);

  const handleSettingsChange = (field: keyof ContractSettings, value: any) => {
    setSettings(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSecurityFeatureToggle = (feature: keyof SecurityFeatures) => {
    setSettings(prev => ({
      ...prev,
      securityFeatures: {
        ...prev.securityFeatures,
        [feature]: !prev.securityFeatures[feature]
      }
    }));
  };

  const handleGenerateContract = async () => {
    setIsGenerating(true);
    try {
      // Contract generation feedback stages
      setGeneratedContract("// Initializing contract generation...");
      await new Promise(resolve => setTimeout(resolve, 800));
      
      setGeneratedContract(prev => prev + "\n// Configuring token parameters...");
      await new Promise(resolve => setTimeout(resolve, 800));
      
      setGeneratedContract(prev => prev + "\n// Implementing security features...");
      await new Promise(resolve => setTimeout(resolve, 800));
      
      const contractCode = generateContractCode(settings);
      setGeneratedContract(contractCode);
      
      toast({
        title: "Contract Generated",
        description: "Your smart contract has been generated successfully!",
        duration: 3000
      });
    } catch (error) {
      toast({
        title: "Generation Failed",
        description: "Failed to generate contract. Please check your settings.",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCopyCode = async () => {
    try {
      await navigator.clipboard.writeText(generatedContract);
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), 2000);
      toast({
        title: "Copied!",
        description: "Contract code copied to clipboard",
        duration: 2000
      });
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Failed to copy contract code",
        variant: "destructive"
      });
    }
  };

  const handleDownloadContract = () => {
    const blob = new Blob([generatedContract], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${settings.tokenName.replace(/\s+/g, '')}_contract.sol`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="py-24 bg-gradient-to-br from-black via-gray-900/50 to-black min-h-screen backdrop-blur-3xl">
      <div className="container mx-auto px-4 max-w-7xl">
        <div className="text-center mb-16">
          <h2 className="font-orbitron text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-pulse-purple via-pulse-orange to-pulse-purple bg-clip-text text-transparent">
            Smart Contract Generator
          </h2>
          <p className="text-xl md:text-2xl text-gray-400 max-w-3xl mx-auto leading-relaxed">
            Generate a complete, feature-rich smart contract for your token
          </p>
        </div>

        <div className="max-w-6xl mx-auto">
          <Card className="bg-black/40 backdrop-blur-xl border-2 border-purple-500/20 shadow-[0_0_45px_-15px_rgba(147,51,234,0.3)] rounded-2xl overflow-hidden">
            <div className="p-8">
              <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
                {/* Fixed tabs list with proper spacing and no overlap */}
                <TabsList className="grid grid-cols-3 w-full h-auto mb-12 bg-gray-800/50 backdrop-blur-md border-2 border-purple-500/20 rounded-xl p-3 gap-3">
                  <TabsTrigger
                    value="settings"
                    className="relative px-4 py-6 rounded-lg data-[state=active]:bg-gradient-to-r data-[state=active]:from-purple-500/20 data-[state=active]:to-blue-500/20 data-[state=active]:shadow-lg transition-all duration-200 hover:bg-white/5 flex flex-col items-center gap-3 min-h-[80px]"
                  >
                    <Settings className="w-6 h-6 flex-shrink-0" />
                    <span className="font-medium text-center text-sm leading-tight">Basic Settings</span>
                  </TabsTrigger>
                  <TabsTrigger
                    value="security"
                    className="relative px-4 py-6 rounded-lg data-[state=active]:bg-gradient-to-r data-[state=active]:from-red-500/20 data-[state=active]:to-orange-500/20 data-[state=active]:shadow-lg transition-all duration-200 hover:bg-white/5 flex flex-col items-center gap-3 min-h-[80px]"
                  >
                    <Shield className="w-6 h-6 flex-shrink-0" />
                    <span className="font-medium text-center text-sm leading-tight">Security Features</span>
                  </TabsTrigger>
                  <TabsTrigger
                    value="preview"
                    className="relative px-4 py-6 rounded-lg data-[state=active]:bg-gradient-to-r data-[state=active]:from-green-500/20 data-[state=active]:to-blue-500/20 data-[state=active]:shadow-lg transition-all duration-200 hover:bg-white/5 flex flex-col items-center gap-3 min-h-[80px]"
                  >
                    <Code className="w-6 h-6 flex-shrink-0" />
                    <span className="font-medium text-center text-sm leading-tight">Contract Preview</span>
                  </TabsTrigger>
                </TabsList>

                {/* Tab content with proper spacing */}
                <div className="mt-8 space-y-8">
                  <TabsContent value="settings" className="space-y-8 mt-0">
                    <Card className="bg-black/30 rounded-xl border-2 border-blue-500/20 shadow-lg hover:border-blue-500/40 transition-all duration-200">
                      <CardHeader className="pb-6">
                        <div className="flex items-center gap-3">
                          <Settings className="w-6 h-6 text-blue-400" />
                          <CardTitle className="text-xl">Token Configuration</CardTitle>
                        </div>
                      </CardHeader>
                      <CardContent className="space-y-8 p-8">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                          <div className="space-y-6">
                            <div className="space-y-3">
                              <Label htmlFor="tokenName" className="text-base font-medium">Token Name</Label>
                              <Input
                                id="tokenName"
                                value={settings.tokenName}
                                onChange={(e) => handleSettingsChange('tokenName', e.target.value)}
                                className="bg-black/50 border-purple-500/20 focus:border-purple-500/40 h-12"
                              />
                            </div>
                            <div className="space-y-3">
                              <Label htmlFor="tokenSymbol" className="text-base font-medium">Token Symbol</Label>
                              <Input
                                id="tokenSymbol"
                                value={settings.tokenSymbol}
                                onChange={(e) => handleSettingsChange('tokenSymbol', e.target.value)}
                                className="bg-black/50 border-purple-500/20 focus:border-purple-500/40 h-12"
                              />
                            </div>
                          </div>
                          <div className="space-y-6">
                            <div className="space-y-3">
                              <Label htmlFor="totalSupply" className="text-base font-medium">Total Supply</Label>
                              <Input
                                id="totalSupply"
                                value={settings.totalSupply}
                                onChange={(e) => handleSettingsChange('totalSupply', e.target.value)}
                                className="bg-black/50 border-purple-500/20 focus:border-purple-500/40 h-12"
                              />
                            </div>
                            <div className="space-y-3">
                              <Label htmlFor="decimals" className="text-base font-medium">Decimals</Label>
                              <Input
                                id="decimals"
                                type="number"
                                value={settings.decimals}
                                onChange={(e) => handleSettingsChange('decimals', parseInt(e.target.value))}
                                className="bg-black/50 border-purple-500/20 focus:border-purple-500/40 h-12"
                              />
                            </div>
                          </div>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 pt-4">
                          <div className="space-y-3">
                            <Label htmlFor="maxTxAmount" className="text-base font-medium">Max Transaction %</Label>
                            <Input
                              id="maxTxAmount"
                              value={settings.maxTxAmount}
                              onChange={(e) => handleSettingsChange('maxTxAmount', e.target.value)}
                              className="bg-black/50 border-purple-500/20 focus:border-purple-500/40 h-12"
                            />
                          </div>
                          <div className="space-y-3">
                            <Label htmlFor="maxWalletAmount" className="text-base font-medium">Max Wallet %</Label>
                            <Input
                              id="maxWalletAmount"
                              value={settings.maxWalletAmount}
                              onChange={(e) => handleSettingsChange('maxWalletAmount', e.target.value)}
                              className="bg-black/50 border-purple-500/20 focus:border-purple-500/40 h-12"
                            />
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>

                  <TabsContent value="security" className="space-y-8 mt-0">
                    <Card className="bg-black/30 rounded-xl border-2 border-red-500/20 shadow-lg hover:border-red-500/40 transition-all duration-200">
                      <CardHeader className="pb-6">
                        <div className="flex items-center gap-3">
                          <Shield className="w-6 h-6 text-red-400" />
                          <CardTitle className="text-xl">Security Features</CardTitle>
                        </div>
                      </CardHeader>
                      <CardContent className="p-8">
                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                          {Object.entries(settings.securityFeatures).map(([feature, enabled]) => (
                            <div key={feature} className="flex items-start justify-between p-6 bg-black/20 rounded-lg border border-gray-700/50 space-x-4">
                              <div className="flex-1 min-w-0">
                                <Label className="font-medium text-white capitalize text-base block mb-2">
                                  {feature.charAt(0).toUpperCase() + feature.slice(1)}
                                </Label>
                                <p className="text-sm text-gray-400 leading-relaxed">{getFeatureDescription(feature)}</p>
                              </div>
                              <Switch
                                checked={enabled}
                                onCheckedChange={() => handleSecurityFeatureToggle(feature as keyof SecurityFeatures)}
                                className="data-[state=checked]:bg-red-500 flex-shrink-0 mt-1"
                              />
                            </div>
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>

                  <TabsContent value="preview" className="space-y-8 mt-0">
                    <Card className="bg-black/30 rounded-xl border-2 border-green-500/20">
                      <CardHeader className="pb-6">
                        <div className="flex items-center gap-3">
                          <Code className="w-6 h-6 text-green-400" />
                          <CardTitle className="text-xl">Contract Preview</CardTitle>
                        </div>
                      </CardHeader>
                      <CardContent className="p-8 space-y-6">
                        <div className="bg-black/60 rounded-lg p-6 font-mono text-sm overflow-auto max-h-[500px] border border-gray-700/50">
                          <pre className="whitespace-pre-wrap break-words text-gray-300 leading-relaxed">
                            {generatedContract || "// Your generated contract will appear here\n// Click 'Generate Smart Contract' below to create your contract"}
                          </pre>
                        </div>
                        <div className="flex flex-col sm:flex-row justify-end gap-4 pt-4">
                          <Button
                            onClick={handleCopyCode}
                            className="bg-purple-500/20 hover:bg-purple-500/30 border border-purple-500/30 h-12 px-6"
                            disabled={!generatedContract}
                          >
                            <Copy className="w-4 h-4 mr-2" />
                            {isCopied ? "Copied!" : "Copy Code"}
                          </Button>
                          <Button
                            onClick={handleDownloadContract}
                            className="bg-green-500/20 hover:bg-green-500/30 border border-green-500/30 h-12 px-6"
                            disabled={!generatedContract}
                          >
                            <Download className="w-4 h-4 mr-2" />
                            Download
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                    
                    <Button
                      onClick={handleGenerateContract}
                      disabled={isGenerating}
                      className="w-full bg-gradient-to-r from-purple-600 to-orange-500 hover:from-purple-700 hover:to-orange-600 text-white font-semibold py-6 rounded-xl shadow-lg transition-all duration-300 flex items-center justify-center gap-3 text-lg"
                    >
                      {isGenerating ? (
                        <>
                          <div className="animate-spin w-6 h-6 border-2 border-white/20 border-t-white rounded-full" />
                          <span>Generating Contract...</span>
                        </>
                      ) : (
                        <>
                          <Zap className="w-6 h-6" />
                          <span>Generate Smart Contract</span>
                        </>
                      )}
                    </Button>
                  </TabsContent>
                </div>
              </Tabs>
            </div>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default ContractCodeGenerator;
