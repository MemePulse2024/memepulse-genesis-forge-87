import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Copy, Download } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';

interface TokenomicsData {
  totalSupply: string;
  buyTax: string;
  sellTax: string;
  taxAllocation: {
    liquidity: string;
    marketing: string;
    reflection: string;
  };
  supplyAllocation: {
    pulsex: string;
    airdrop: string;
    dev: string;
    marketing: string;
    burn: string;
  };
}

const TokenomicsEngine = () => {
  const [tokenomics, setTokenomics] = useState<TokenomicsData>({
    totalSupply: '1000000000',
    buyTax: '5',
    sellTax: '5',
    taxAllocation: {
      liquidity: '40',
      marketing: '40',
      reflection: '20'
    },
    supplyAllocation: {
      pulsex: '80',
      airdrop: '10',
      dev: '5',
      marketing: '3',
      burn: '2'
    }
  });

  const [errors, setErrors] = useState<{[key: string]: string}>({});
  const { toast } = useToast();

  const validateAllocations = () => {
    const newErrors: {[key: string]: string} = {};
    
    // Validate tax allocation
    const taxTotal = Object.values(tokenomics.taxAllocation).reduce((sum, val) => sum + parseFloat(val || '0'), 0);
    if (Math.abs(taxTotal - 100) > 0.01) {
      newErrors.taxAllocation = `Tax allocations must equal 100% (currently ${taxTotal.toFixed(1)}%)`;
    }
    
    // Validate supply allocation
    const supplyTotal = Object.values(tokenomics.supplyAllocation).reduce((sum, val) => sum + parseFloat(val || '0'), 0);
    if (Math.abs(supplyTotal - 100) > 0.01) {
      newErrors.supplyAllocation = `Supply allocations must equal 100% (currently ${supplyTotal.toFixed(1)}%)`;
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  useEffect(() => {
    validateAllocations();
  }, [tokenomics]);

  // Fixed function - properly handling nested objects in state
  const updateTokenomics = (field: string, value: string, subField?: string) => {
    if (subField) {
      setTokenomics(prev => {
        // Create a safe copy for the nested field
        const fieldCopy = { ...prev[field as keyof TokenomicsData] } as Record<string, string>;
        // Update the subfield in the copy
        fieldCopy[subField] = value;
        // Return new state with the updated copy
        return {
          ...prev,
          [field]: fieldCopy
        };
      });
    } else {
      setTokenomics(prev => ({
        ...prev,
        [field]: value
      }));
    }
  };

  const formatNumber = (num: string) => {
    return parseFloat(num).toLocaleString();
  };

  const generateSummary = () => {
    const isValid = validateAllocations();
    if (!isValid) {
      toast({
        title: "Validation Error",
        description: "Please fix allocation errors before generating summary.",
        variant: "destructive"
      });
      return;
    }

    const summary = `
üöÄ TOKENOMICS SUMMARY üöÄ

üíé Total Supply: ${formatNumber(tokenomics.totalSupply)} tokens

üìä TAXES:
‚Ä¢ Buy Tax: ${tokenomics.buyTax}%
‚Ä¢ Sell Tax: ${tokenomics.sellTax}%

üí∞ TAX ALLOCATION:
‚Ä¢ Liquidity: ${tokenomics.taxAllocation.liquidity}%
‚Ä¢ Marketing: ${tokenomics.taxAllocation.marketing}%
‚Ä¢ Reflection: ${tokenomics.taxAllocation.reflection}%

üéØ SUPPLY ALLOCATION:
‚Ä¢ PulseX Liquidity: ${tokenomics.supplyAllocation.pulsex}% (${formatNumber((parseFloat(tokenomics.totalSupply) * parseFloat(tokenomics.supplyAllocation.pulsex) / 100).toString())} tokens)
‚Ä¢ Airdrop: ${tokenomics.supplyAllocation.airdrop}% (${formatNumber((parseFloat(tokenomics.totalSupply) * parseFloat(tokenomics.supplyAllocation.airdrop) / 100).toString())} tokens)
‚Ä¢ Dev Team: ${tokenomics.supplyAllocation.dev}% (${formatNumber((parseFloat(tokenomics.totalSupply) * parseFloat(tokenomics.supplyAllocation.dev) / 100).toString())} tokens)
‚Ä¢ Marketing: ${tokenomics.supplyAllocation.marketing}% (${formatNumber((parseFloat(tokenomics.totalSupply) * parseFloat(tokenomics.supplyAllocation.marketing) / 100).toString())} tokens)
‚Ä¢ Burn: ${tokenomics.supplyAllocation.burn}% (${formatNumber((parseFloat(tokenomics.totalSupply) * parseFloat(tokenomics.supplyAllocation.burn) / 100).toString())} tokens)

Generated by MemePulse Tokenomics Engine
    `.trim();

    navigator.clipboard.writeText(summary);
    toast({
      title: "Summary Copied! üìã",
      description: "Tokenomics summary copied to clipboard.",
    });
  };

  const exportData = () => {
    const data = {
      tokenomics,
      timestamp: new Date().toISOString(),
      generatedBy: "MemePulse"
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'tokenomics-config.json';
    a.click();
    URL.revokeObjectURL(url);
    
    toast({
      title: "Exported! üìÅ",
      description: "Tokenomics data exported as JSON.",
    });
  };

  // Chart data
  const taxChartData = [
    { name: 'Liquidity', value: parseFloat(tokenomics.taxAllocation.liquidity || '0'), color: '#6a0dad' },
    { name: 'Marketing', value: parseFloat(tokenomics.taxAllocation.marketing || '0'), color: '#ff5733' },
    { name: 'Reflection', value: parseFloat(tokenomics.taxAllocation.reflection || '0'), color: '#33ff57' },
  ];

  const supplyChartData = [
    { name: 'PulseX', value: parseFloat(tokenomics.supplyAllocation.pulsex || '0'), color: '#6a0dad' },
    { name: 'Airdrop', value: parseFloat(tokenomics.supplyAllocation.airdrop || '0'), color: '#ff5733' },
    { name: 'Dev Team', value: parseFloat(tokenomics.supplyAllocation.dev || '0'), color: '#33ff57' },
    { name: 'Marketing', value: parseFloat(tokenomics.supplyAllocation.marketing || '0'), color: '#ffff33' },
    { name: 'Burn', value: parseFloat(tokenomics.supplyAllocation.burn || '0'), color: '#ff3333' },
  ];

  return (
    <section id="tokenomics" className="py-20 bg-gradient-to-br from-black to-gray-900">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12">
          <h2 className="font-orbitron text-4xl md:text-6xl font-bold text-white mb-4">
            ‚öôÔ∏è Tokenomics Engine
          </h2>
          <p className="text-xl text-gray-400 max-w-2xl mx-auto">
            Configure your meme coin's tokenomics with built-in validation and visual charts
          </p>
        </div>

        <div className="max-w-6xl mx-auto grid md:grid-cols-2 gap-8">
          {/* Input Controls */}
          <div className="space-y-6">
            {/* Basic Settings */}
            <Card className="bg-card/80 backdrop-blur-md border-purple-500/20">
              <CardHeader>
                <CardTitle className="font-orbitron">Basic Settings</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="totalSupply">Total Supply</Label>
                  <Input
                    id="totalSupply"
                    type="number"
                    value={tokenomics.totalSupply}
                    onChange={(e) => updateTokenomics('totalSupply', e.target.value)}
                    className="bg-black/50 border-gray-600"
                  />
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="buyTax">Buy Tax (%)</Label>
                    <Input
                      id="buyTax"
                      type="number"
                      max="25"
                      value={tokenomics.buyTax}
                      onChange={(e) => updateTokenomics('buyTax', e.target.value)}
                      className="bg-black/50 border-gray-600"
                    />
                  </div>
                  <div>
                    <Label htmlFor="sellTax">Sell Tax (%)</Label>
                    <Input
                      id="sellTax"
                      type="number"
                      max="25"
                      value={tokenomics.sellTax}
                      onChange={(e) => updateTokenomics('sellTax', e.target.value)}
                      className="bg-black/50 border-gray-600"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Tax Allocation */}
            <Card className="bg-card/80 backdrop-blur-md border-purple-500/20">
              <CardHeader>
                <CardTitle className="font-orbitron">Tax Allocation</CardTitle>
                {errors.taxAllocation && (
                  <p className="text-red-400 text-sm">{errors.taxAllocation}</p>
                )}
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="liquidity">Liquidity (%)</Label>
                  <Input
                    id="liquidity"
                    type="number"
                    value={tokenomics.taxAllocation.liquidity}
                    onChange={(e) => updateTokenomics('taxAllocation', e.target.value, 'liquidity')}
                    className="bg-black/50 border-gray-600"
                  />
                </div>
                <div>
                  <Label htmlFor="marketing">Marketing (%)</Label>
                  <Input
                    id="marketing"
                    type="number"
                    value={tokenomics.taxAllocation.marketing}
                    onChange={(e) => updateTokenomics('taxAllocation', e.target.value, 'marketing')}
                    className="bg-black/50 border-gray-600"
                  />
                </div>
                <div>
                  <Label htmlFor="reflection">Reflection (%)</Label>
                  <Input
                    id="reflection"
                    type="number"
                    value={tokenomics.taxAllocation.reflection}
                    onChange={(e) => updateTokenomics('taxAllocation', e.target.value, 'reflection')}
                    className="bg-black/50 border-gray-600"
                  />
                </div>
              </CardContent>
            </Card>

            {/* Supply Allocation */}
            <Card className="bg-card/80 backdrop-blur-md border-purple-500/20">
              <CardHeader>
                <CardTitle className="font-orbitron">Supply Allocation</CardTitle>
                {errors.supplyAllocation && (
                  <p className="text-red-400 text-sm">{errors.supplyAllocation}</p>
                )}
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="pulsex">PulseX Liquidity (%)</Label>
                  <Input
                    id="pulsex"
                    type="number"
                    value={tokenomics.supplyAllocation.pulsex}
                    onChange={(e) => updateTokenomics('supplyAllocation', e.target.value, 'pulsex')}
                    className="bg-black/50 border-gray-600"
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="airdrop">Airdrop (%)</Label>
                    <Input
                      id="airdrop"
                      type="number"
                      value={tokenomics.supplyAllocation.airdrop}
                      onChange={(e) => updateTokenomics('supplyAllocation', e.target.value, 'airdrop')}
                      className="bg-black/50 border-gray-600"
                    />
                  </div>
                  <div>
                    <Label htmlFor="dev">Dev Team (%)</Label>
                    <Input
                      id="dev"
                      type="number"
                      value={tokenomics.supplyAllocation.dev}
                      onChange={(e) => updateTokenomics('supplyAllocation', e.target.value, 'dev')}
                      className="bg-black/50 border-gray-600"
                    />
                  </div>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="marketingSupply">Marketing (%)</Label>
                    <Input
                      id="marketingSupply"
                      type="number"
                      value={tokenomics.supplyAllocation.marketing}
                      onChange={(e) => updateTokenomics('supplyAllocation', e.target.value, 'marketing')}
                      className="bg-black/50 border-gray-600"
                    />
                  </div>
                  <div>
                    <Label htmlFor="burn">Burn (%)</Label>
                    <Input
                      id="burn"
                      type="number"
                      value={tokenomics.supplyAllocation.burn}
                      onChange={(e) => updateTokenomics('supplyAllocation', e.target.value, 'burn')}
                      className="bg-black/50 border-gray-600"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Charts and Actions */}
          <div className="space-y-6">
            {/* Tax Allocation Chart */}
            <Card className="bg-card/80 backdrop-blur-md border-purple-500/20">
              <CardHeader>
                <CardTitle className="font-orbitron text-center">Tax Allocation</CardTitle>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={250}>
                  <PieChart>
                    <Pie
                      data={taxChartData}
                      cx="50%"
                      cy="50%"
                      outerRadius={80}
                      dataKey="value"
                      label={({ name, value }) => `${name}: ${value}%`}
                    >
                      {taxChartData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            {/* Supply Allocation Chart */}
            <Card className="bg-card/80 backdrop-blur-md border-purple-500/20">
              <CardHeader>
                <CardTitle className="font-orbitron text-center">Supply Allocation</CardTitle>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={250}>
                  <PieChart>
                    <Pie
                      data={supplyChartData}
                      cx="50%"
                      cy="50%"
                      outerRadius={80}
                      dataKey="value"
                      label={({ name, value }) => `${name}: ${value}%`}
                    >
                      {supplyChartData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            {/* Action Buttons */}
            <Card className="bg-card/80 backdrop-blur-md border-purple-500/20">
              <CardContent className="pt-6">
                <div className="space-y-4">
                  <Button
                    onClick={generateSummary}
                    className="w-full bg-gradient-to-r from-pulse-purple to-pulse-orange hover:from-pulse-orange hover:to-pulse-purple"
                    disabled={Object.keys(errors).length > 0}
                  >
                    <Copy className="w-4 h-4 mr-2" />
                    Copy Tokenomics Summary
                  </Button>
                  
                  <Button
                    onClick={exportData}
                    variant="outline"
                    className="w-full border-gray-600 hover:bg-gray-800"
                  >
                    <Download className="w-4 h-4 mr-2" />
                    Export Configuration
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </section>
  );
};

export default TokenomicsEngine;
